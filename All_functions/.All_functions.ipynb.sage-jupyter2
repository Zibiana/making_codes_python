{"backend_state":"ready","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1707257319759,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"05758e","input":"","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"06980f","input":"","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"153eb7","input":"","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"189ddc","input":"","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6b5779","input":"","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6bffbc","input":"","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7a9123","input":"","pos":25,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8750b7","input":"","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"937af0","input":"","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c1168b","input":"","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c19a60","input":"","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d77d7b","input":"","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d8e9d4","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f10f43","input":"","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"feddfa","input":"","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"fcb5d7","input":"##### Import libraries #####\n\n\nimport string\nimport math\nimport matplotlib.pyplot as plt\n\n\n\n##### Helper functions #####\n\n\n### convert_letter_to_number(letter)\n### Converts a lowercase number to its value between 0 and 25\n### letter: string (a single lowercase letter)\n\ndef convert_letter_to_number(letter):\n    # Define constant that will allow us to move the letter codes by 97\n    MOVE_NUMBER = 97\n    # Convert input to ASCII (97 to 122)\n    number_ascii = ord(letter)\n    # Move number to lie in the range 0 to 25\n    number = number_ascii - MOVE_NUMBER\n    return number\n\n\n### convert_number_to_letter(number)\n### Converts a number between 0 and 25 to its corresponding letter\n### number: integer (should be between 0 and 25)\n\ndef convert_number_to_letter(number):\n    # Define constant that will allow us to move the letter codes by 97\n    MOVE_NUMBER = 97\n    # Move number to lie in the ASCII range 97 to 122\n    number_ascii = number + MOVE_NUMBER\n    # Convert number to letter\n    letter = chr(number_ascii)\n    return letter\n\n\n### generate_units(n)\n### Generates a list of numbers relatively prime to n.\n### n: integer\n\ndef generate_units(n):\n    unit_list = []\n    for m in range(1, n):\n        if math.gcd(m, n) == 1:\n            unit_list.append(m)\n    return unit_list\n\n\n### affine_encrypt_letter(plaintext_letter, key, m)\n### Applies affine encrytpion to a plaintext letter p to produce ciphertext letter\n###     c = m*p + k mod 26\n### plaintext_letter: string (can be any character, but should be only a single character)\n### key: integer (between 1 and 25)\n### m: integer (relatively prime to 26)\n\ndef affine_encrypt_letter(plaintext_letter, key, m = 1):\n    # Replace uppercase with lowercase\n    plaintext_letter = plaintext_letter.lower()\n    # Check if plaintext_letter is a lowercase letter\n    if ord(plaintext_letter) >= 97 and ord(plaintext_letter) <= 122:\n        plaintext_number = convert_letter_to_number(plaintext_letter)\n        ciphertext_number = (m* plaintext_number + key) % 26\n        ciphertext_letter = convert_number_to_letter(ciphertext_number)\n        return ciphertext_letter.upper()\n    else:\n        # If we get to this spot, we know we don't have a letter at all,\n        # so just return the character as is\n        return plaintext_letter\n\n\n### freq_bar(letter_frequencies)\n### Produces a bar graph of letters and their frequencies in a piece of text.\n### letter_freqencies: a dictionary with letters as keys and counts/percents as values\n\ndef freq_bar(letter_frequencies):\n    plt.bar(*zip(*letter_frequencies.items()))\n    plt.show()\n\n\n\n##### Shift encryption/decryption functions #####\n\n\n# With a known key, just use the affine encryption/decryption functions below with m = 1\n# (or leave m out entirely, as m = 1 is the default)\n# For brute force attempts, see the \"Brute force functions\" section lower down\n\n\n\n##### Affine encryption/decryption functions #####\n\n\n### affine_encrypt(plaintext, key, m = 1)\n### Encrypts ciphertext using c = m*p + k mod 26.\n### plaintext: string\n### key: integer (the value of k in the linear congruence above, from 1 to 25)\n### m: integer (default value 1 results in shift encryption--should be relatively prime to 26)\n\ndef affine_encrypt(plaintext, key, m = 1):\n    # Stop if m is not chosen appropriately\n    if math.gcd(m, 26) != 1:\n        print(\"The value of m must be relatively prime to 26!\")\n    else:\n        ciphertext = \"\"\n        for letter in plaintext:\n            ciphertext_letter = affine_encrypt_letter(letter, key, m)\n            ciphertext = ciphertext + ciphertext_letter\n        return ciphertext\n\n\n### affine_decrypt(ciphertext, key, m = 1)\n### Decrypts ciphertext encrypted using c = m*p + k mod 26.\n### ciphertext: string\n### key: integer (the value of k in the linear congruence above, from 1 to 25)\n### m: integer (default value 1 results in shift decryption--should be relatively prime to 26)\n\ndef affine_decrypt(ciphertext, key, m = 1):\n    # Stop if m is not chosen appropriately\n    if math.gcd(m, 26) != 1:\n        print(\"The value of m must be relatively prime to 26!\")\n    else:\n        m_inv = pow(m, -1, mod = 26)\n        plaintext = affine_encrypt(ciphertext, -m_inv*key, m_inv)\n        return plaintext.lower()\n\n\n\n##### Brute force functions #####\n\n\n### brute_shift_decrypt(ciphertext)\n### Prints decryption attempts for all possible keys (1 to 25)\n### ciphertext: string\n\ndef brute_shift_decrypt(ciphertext):\n    for key in range(1, 26):\n        plaintext = affine_decrypt(ciphertext, key)\n        print(\"Key = \" + str(key) + \": \" + plaintext)\n\n\n### brute_affine_decrypt(ciphertext)\n### Prints decryption attempts for all possible keys (1 to 25)\n###     and all possible values of m (those relatively prime to 26)\n### ciphertext: string\n\ndef brute_affine_decrypt(ciphertext):\n    # Get list of legal m values\n    m_list = generate_units(26)\n    for key in range(1, 26):\n        for m in m_list:\n            plaintext = affine_decrypt(ciphertext, key, m)\n            print(\"Key = \" + str(key) + \", m = \" + str(m) + \": \" + plaintext)\n\n\n\n##### Frequency analysis functions #####\n\n\n### analyze_frequencies(text, output_format = \"count\", sort = False)\n### Creates a dictionary of letter frequencies along with a bar graph\n### text: string\n### output_format: string (either \"count\" or \"percent\"--default is \"count\")\n### sort: boolean (determines if output is sorted by frequency instead of appearing in alphabetical order--\n###     default is False)\n\ndef analyze_frequencies(text, output_format = \"count\", sort = False):\n    # Store uppercase alphabet\n    alph_upper = string.ascii_uppercase\n    # Convert text to uppercase\n    text = text.upper()\n    # Initialize frequencies to 0\n    frequencies = {}\n    for letter in alph_upper:\n        frequencies[letter] = 0\n    # Go through the text and for each letter,\n    # add 1 to the value corresponding to that letter\n    for letter in text:\n        if letter in alph_upper:\n            frequencies[letter] += 1\n    # Check output_format argument\n    if output_format not in [\"count\", \"percent\"]:\n        print('The output format must be either \"count\" or \"percent\".')\n        return\n    elif output_format == \"percent\":\n        total_letters = sum(frequencies.values())\n        for letter in frequencies:\n            frequencies[letter] = round(100 * frequencies[letter]/total_letters, ndigits = 3)\n    # Check sort argument\n    if sort:\n        frequencies = dict(sorted(frequencies.items(), key = lambda item: item[1], reverse = True))\n    print(frequencies)\n    # Create bar graph\n    freq_bar(frequencies)\n\n\n### shift_decrypt_freq(ciphertext, ciphertext_letter_guess, plaintext_letter_guess = \"e\")\n### Decrypts a shift cipher by matching a letter from the ciphertext with a possible letter of plaintext\n### ciphertext: string\n### ciphertext_letter_guess: string (a single letter from the ciphertext, often the most common letter)\n### plaintext_letter_guess: string (a single letter that you guess is the match to the\n###     ciphertext letter guess--default value is \"e\")\n\ndef shift_decrypt_freq(ciphertext, ciphertext_letter_guess, plaintext_letter_guess = \"e\"):\n    key_guess = ord(ciphertext_letter_guess.lower()) - ord(plaintext_letter_guess.lower())\n    plaintext = affine_decrypt(ciphertext, key = key_guess)\n    print(\"key = \" + str(key_guess))\n    print(plaintext)\n\n\n### solve_affine_congruences(c1, c2, p1, p2, mod = 26)\n### Solves a system of linear congruences of the form\n###         c1 = m*p1 + k modulo mod\n###         c2 = m*p2 + k modulo mod\n###     that results from matching two letters from the ciphertext to two possible letters of plaintext.\n###     If a solution exists, the output is a list of tuples of the form (k, m).\n### c1, c2, p1, p2: integers\n### mod: integer (modulus--default is 26 to work with the alphabet)\n\ndef solve_affine_congruences(c1, c2, p1, p2, mod = 26):\n    solution_list = []\n    m_list = generate_units(26)\n    for k in range(0, 26):\n        for m in m_list:\n            # Check if c = m*p + k\n            # or, equivalently, c - m*p - k = 0\n            if (c1 - m*p1 - k) % mod == 0 and (c2 - m*p2 - k) % mod == 0 :\n                solution_list.append((k, m))\n    return(solution_list)\n\n\n### affine_decrypt_freq(ciphertext, ciphertext_letter1_guess, ciphertext_letter2_guess,\n###                     plaintext_letter1_guess = \"e\", plaintext_letter2_guess = \"t\")\n### Decrypts an affine cipher by matching two letters from the ciphertext with two possible letter of plaintext\n### ciphertext: string\n### ciphertext_letter1_guess, ciphertext_letter2_guess: string\n###     (each is a single letter from the ciphertext, often the most common letters)\n### plaintext_letter1_guess, plaintext_letter2_guess: string\n###     (each is a single letter that you guess is the match to the\n###     two ciphertext letters guesses--default values are \"e\" and \"t\".)\n\ndef affine_decrypt_freq(ciphertext, ciphertext_letter1_guess, ciphertext_letter2_guess, \\\n                        plaintext_letter1_guess = \"e\", plaintext_letter2_guess = \"t\"):\n    # Convert letters to numbers\n    p1_guess = convert_letter_to_number(plaintext_letter1_guess.lower())\n    c1_guess = convert_letter_to_number(ciphertext_letter1_guess.lower())\n    p2_guess = convert_letter_to_number(plaintext_letter2_guess.lower())\n    c2_guess = convert_letter_to_number(ciphertext_letter2_guess.lower())\n    # Solve system of linear congruences\n    solution_list = solve_affine_congruences(c1_guess, c2_guess, p1_guess, p2_guess, mod = 26)\n    if solution_list:\n        for solution_pair in solution_list:\n            print(\"(k, m) = \" + str(solution_pair))\n            print(affine_decrypt(ciphertext, key = solution_pair[0], m = solution_pair[1]))\n    else:\n        print(\"No solution\")\n\n\n\n##### General linear congruence functions #####\n\n\n### solve_linear_congruence(a, b, m)\n### Solves a linear congruence of the form\n###         ax = b mod m\n### a, b, m: integers\n\ndef solve_linear_congruence(a, b, m):\n    solution_list = []\n    for x in range(0, m):\n        # Check if ax = b mod m\n        # or, equivalently, ax - b = 0 mod m\n        if (a*x - b) % m == 0:\n            solution_list.append(x)\n    if solution_list:\n        return(solution_list)\n    else:\n        print(\"No solution\")\n\n\n### solve_system_linear_congruence(a1, b1, a2, b2, c1, c2, m)\n### Solves a system of linear congruences of the form\n###         a1*x + b1*y = c1 mod m\n###         a2*x + b2*y = c2 mod m\n### a, b, m: integers\n\ndef solve_system_linear_congruences(a1, b1, c1, a2, b2, c2, m):\n    solution_list = []\n    for x in range(0, m):\n        for y in range(0, m):\n            # Check if ax + by = c mod m\n            # or, equivalently, ax + by - c = 0 mod m\n            if (a1*x + b1*y - c1) % m == 0 and (a2*x + b2*y - c2) % m == 0 :\n                solution_list.append((x, y))\n    if solution_list:\n        return(solution_list)\n    else:\n        print(\"No solution\")\n\n\n\n##### English letter frequencies (alphebtic and sorted by frequency) #####\n\nENGLISH_LETTER_FREQ = {\n    \"A\": 8.167, \"B\": 1.492, \"C\": 2.782, \"D\": 4.253, \"E\": 12.702, \"F\": 2.228, \"G\": 2.015, \"H\": 6.094, \"I\": 6.966, \"J\": 0.153, \"K\": 0.772, \"L\": 4.025, \"M\": 2.406, \"N\": 6.749, \"O\": 7.507, \"P\": 1.929, \"Q\": 0.095, \"R\": 5.987, \"S\": 6.327, \"T\": 9.056, \"U\": 2.758, \"V\": 0.978, \"W\": 2.360, \"X\": 0.150, \"Y\": 1.974, \"Z\": 0.074\n}\n\nENGLISH_LETTER_FREQ_SORT = dict(sorted(ENGLISH_LETTER_FREQ.items(), key = lambda item: item[1], reverse = True))","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"2dcd97","input":"solve_linear_congruence(a = 17, b = 0, m = 34)","output":{"0":{"data":{"text/plain":"[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]"},"exec_count":2,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"e16966","input":"solve_linear_congruence(a = 14, b = 10, m = 32)","output":{"0":{"data":{"text/plain":"[3, 19]"},"exec_count":3,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"6dc112","input":"solve_linear_congruence(a = 9, b = 1, m = 30)","output":{"0":{"name":"stdout","output_type":"stream","text":"No solution\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"f1c1b7","input":"solve_system_linear_congruences(a1 = 2, b1 = 5, c1 = 16, a2 = 11, b2 = 11, c2 = 16, m = 18)","output":{"0":{"data":{"text/plain":"[(2, 6), (8, 0), (14, 12)]"},"exec_count":5,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"02b3cc","input":"solve_system_linear_congruences(a1 = 0, b1 = 6, c1 = 1, a2 = 15, b2 = 22, c2 = 13, m = 22)","output":{"0":{"name":"stdout","output_type":"stream","text":"No solution\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"044a09","input":"# McDevitt and Arnold, Chapter 1, 14(d)\nsolve_system_linear_congruences(a1 = 1, b1 = 1, c1 = 14, a2 = 8, b2 = 1, c2 = 6, m = 16)","output":{"0":{"data":{"text/plain":"[(8, 6)]"},"exec_count":7,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"23132d","input":"# All functions\n\nHere are all the final versions of all the functions we've developed. If you want to use any of these functions, be sure to run the code cell below, then add code cells at the bottom of the document to run the functions as you need. Each function is documented below in the comments with a reminder for the requirements for function inputs.\n\nI've also added two functions that generalize the function for solving linear congruences. The function we already developed, `solve_affine_congruences`, is designed for the special case of the affine cipher. The new functions, `solve_linear_congruence` and `solve_system_linear_congruences` are for the more generic cases:\n\n$$\nax \\equiv b \\mod m\n$$\nand\n\\begin{align*}\na_{1}x + b_{1}y &= c_{1} \\mod m \\\\\na_{2}x + b_{2}y &= c_{2} \\mod m\n\\end{align*}\n\nrespectively.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"36237c","input":"### McDevitt and Arnold, Chapter 1, 14(b)\n\n\\begin{align*}\n2x + 5y &\\equiv 16 \\\\\n11x + 11y &\\equiv 16 \\mod 18\n\\end{align*}","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"4de6ee","input":"## Blank space below for using the functions as needed:","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"68221f","input":"## Test new system of linear congruences function","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"72241b","input":"### McDevitt and Arnold, Chapter 1, 14(c)\n\n\\begin{align*}\n6y &\\equiv 1 \\\\\n15x + 22y &\\equiv 13 \\mod 22\n\\end{align*}","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"830336","input":"### McDevitt and Arnold, Chapter 1, 11(b)\n\n$$\n14x \\equiv 10 \\mod 32\n$$","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"893da5","input":"### McDevitt and Arnold, Chapter 1, 11(j)\n\n$$\n9x \\equiv 1 \\mod 30\n$$","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"a5c0c7","input":"### McDevitt and Arnold, Chapter 1, 14(d)\n\n\\begin{align*}\nx + y &\\equiv 14 \\\\\n8x + y &\\equiv 6 \\mod 16\n\\end{align*}","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"a7e289","input":"## Test new linear congruence functions","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"b85f8d","input":"### McDevitt and Arnold, Chapter 1, 11(a)\n\n$$\n17x \\equiv 0 \\mod 34\n$$","pos":3,"type":"cell"}
{"id":0,"time":1707257307790,"type":"user"}
{"last_load":1707257307862,"type":"file"}